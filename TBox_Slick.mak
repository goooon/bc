# SlickEdit generated file.  Do not edit this file except in designated areas.

# Make command to use for dependencies
MAKE=make
RM=rm
MKDIR=mkdir

# -----Begin user-editable area-----

# -----End user-editable area-----

# If no configuration is specified, "Debug" will be used
ifndef CFG
CFG=Debug
endif

#
# Configuration: Debug
#
ifeq "$(CFG)" "Debug"
OUTDIR=Debug
OUTFILE=$(OUTDIR)/TBox_Slick
CFG_INC=
CFG_LIB=
CFG_OBJ=
COMMON_OBJ=$(OUTDIR)/Application.o $(OUTDIR)/CmdParser.o \
	$(OUTDIR)/Config.o $(OUTDIR)/dep.o $(OUTDIR)/Event.o \
	$(OUTDIR)/main.o $(OUTDIR)/Mqtt.o $(OUTDIR)/Task.o $(OUTDIR)/Types.o \
	$(OUTDIR)/bcp.o $(OUTDIR)/bcp_comm.o $(OUTDIR)/bcp_packet.o \
	$(OUTDIR)/binary_formater.o $(OUTDIR)/crc32.o 
OBJ=$(COMMON_OBJ) $(CFG_OBJ)
ALL_OBJ=$(OUTDIR)/Application.o $(OUTDIR)/CmdParser.o \
	$(OUTDIR)/Config.o $(OUTDIR)/dep.o $(OUTDIR)/Event.o \
	$(OUTDIR)/main.o $(OUTDIR)/Mqtt.o $(OUTDIR)/Task.o $(OUTDIR)/Types.o \
	$(OUTDIR)/bcp.o $(OUTDIR)/bcp_comm.o $(OUTDIR)/bcp_packet.o \
	$(OUTDIR)/binary_formater.o $(OUTDIR)/crc32.o 

COMPILE=g++ -c    -g -o "$(OUTDIR)/$(*F).o" $(CFG_INC) "$<"
LINK=g++  -g -o "$(OUTFILE)" $(OBJ) $(CFG_LIB)
COMPILE_ADA=gnat -g -c -o "$(OUTDIR)/$(*F).o" "$<"
COMPILE_ADB=gnat -g -c -o "$(OUTDIR)/$(*F).o" "$<"
COMPILE_F=gfortran -c -g -o "$(OUTDIR)/$(*F).o" "$<"
COMPILE_F90=gfortran -c -g -o "$(OUTDIR)/$(*F).o" "$<"
COMPILE_D=gdc -c -g -o "$(OUTDIR)/$(*F).o" "$<"

# Pattern rules
$(OUTDIR)/%.o : fundation/src/cpp/core/%.cpp
	$(COMPILE)

$(OUTDIR)/%.o : tbox/src/cpp/%.cpp
	$(COMPILE)

$(OUTDIR)/%.o : fundation/src/cpp/%.cpp
	$(COMPILE)

$(OUTDIR)/%.o : fundation/src/cpp/core/%.ada
	$(COMPILE_ADA)

$(OUTDIR)/%.o : tbox/src/cpp/%.ada
	$(COMPILE_ADA)

$(OUTDIR)/%.o : fundation/src/cpp/%.ada
	$(COMPILE_ADA)

$(OUTDIR)/%.o : fundation/src/cpp/core/%.d
	$(COMPILE_D)

$(OUTDIR)/%.o : tbox/src/cpp/%.d
	$(COMPILE_D)

$(OUTDIR)/%.o : fundation/src/cpp/%.d
	$(COMPILE_D)

$(OUTDIR)/%.o : fundation/src/cpp/core/%.adb
	$(COMPILE_ADB)

$(OUTDIR)/%.o : tbox/src/cpp/%.adb
	$(COMPILE_ADB)

$(OUTDIR)/%.o : fundation/src/cpp/%.adb
	$(COMPILE_ADB)

$(OUTDIR)/%.o : fundation/src/cpp/core/%.f90
	$(COMPILE_F90)

$(OUTDIR)/%.o : tbox/src/cpp/%.f90
	$(COMPILE_F90)

$(OUTDIR)/%.o : fundation/src/cpp/%.f90
	$(COMPILE_F90)

$(OUTDIR)/%.o : fundation/src/cpp/core/%.f
	$(COMPILE_F)

$(OUTDIR)/%.o : tbox/src/cpp/%.f
	$(COMPILE_F)

$(OUTDIR)/%.o : fundation/src/cpp/%.f
	$(COMPILE_F)

# Build rules
all: $(OUTFILE)

$(OUTFILE): $(OUTDIR)  $(OBJ)
	$(LINK)

$(OUTDIR):
	$(MKDIR) -p "$(OUTDIR)"

# Rebuild this project
rebuild: cleanall all

# Clean this project
clean:
	$(RM) -f $(OUTFILE)
	$(RM) -f $(OBJ)

# Clean this project and all dependencies
cleanall: clean
endif

#
# Configuration: Release
#
ifeq "$(CFG)" "Release"
OUTDIR=Release
OUTFILE=$(OUTDIR)/TBox_Slick
CFG_INC=
CFG_LIB=
CFG_OBJ=
COMMON_OBJ=$(OUTDIR)/Application.o $(OUTDIR)/CmdParser.o \
	$(OUTDIR)/Config.o $(OUTDIR)/dep.o $(OUTDIR)/Event.o \
	$(OUTDIR)/main.o $(OUTDIR)/Mqtt.o $(OUTDIR)/Task.o $(OUTDIR)/Types.o \
	$(OUTDIR)/bcp.o $(OUTDIR)/bcp_comm.o $(OUTDIR)/bcp_packet.o \
	$(OUTDIR)/binary_formater.o $(OUTDIR)/crc32.o 
OBJ=$(COMMON_OBJ) $(CFG_OBJ)
ALL_OBJ=$(OUTDIR)/Application.o $(OUTDIR)/CmdParser.o \
	$(OUTDIR)/Config.o $(OUTDIR)/dep.o $(OUTDIR)/Event.o \
	$(OUTDIR)/main.o $(OUTDIR)/Mqtt.o $(OUTDIR)/Task.o $(OUTDIR)/Types.o \
	$(OUTDIR)/bcp.o $(OUTDIR)/bcp_comm.o $(OUTDIR)/bcp_packet.o \
	$(OUTDIR)/binary_formater.o $(OUTDIR)/crc32.o 

COMPILE=g++ -c   -o "$(OUTDIR)/$(*F).o" $(CFG_INC) "$<"
LINK=g++  -o "$(OUTFILE)" $(OBJ) $(CFG_LIB)
COMPILE_ADA=gnat -O -c -o "$(OUTDIR)/$(*F).o" "$<"
COMPILE_ADB=gnat -O -c -o "$(OUTDIR)/$(*F).o" "$<"
COMPILE_F=gfortran -O -g -o "$(OUTDIR)/$(*F).o" "$<"
COMPILE_F90=gfortran -O -g -o "$(OUTDIR)/$(*F).o" "$<"
COMPILE_D=gdc -c -g -o "$(OUTDIR)/$(*F).o" "$<"

# Pattern rules
$(OUTDIR)/%.o : fundation/src/cpp/core/%.cpp
	$(COMPILE)

$(OUTDIR)/%.o : tbox/src/cpp/%.cpp
	$(COMPILE)

$(OUTDIR)/%.o : fundation/src/cpp/%.cpp
	$(COMPILE)

$(OUTDIR)/%.o : fundation/src/cpp/core/%.ada
	$(COMPILE_ADA)

$(OUTDIR)/%.o : tbox/src/cpp/%.ada
	$(COMPILE_ADA)

$(OUTDIR)/%.o : fundation/src/cpp/%.ada
	$(COMPILE_ADA)

$(OUTDIR)/%.o : fundation/src/cpp/core/%.d
	$(COMPILE_D)

$(OUTDIR)/%.o : tbox/src/cpp/%.d
	$(COMPILE_D)

$(OUTDIR)/%.o : fundation/src/cpp/%.d
	$(COMPILE_D)

$(OUTDIR)/%.o : fundation/src/cpp/core/%.adb
	$(COMPILE_ADB)

$(OUTDIR)/%.o : tbox/src/cpp/%.adb
	$(COMPILE_ADB)

$(OUTDIR)/%.o : fundation/src/cpp/%.adb
	$(COMPILE_ADB)

$(OUTDIR)/%.o : fundation/src/cpp/core/%.f90
	$(COMPILE_F90)

$(OUTDIR)/%.o : tbox/src/cpp/%.f90
	$(COMPILE_F90)

$(OUTDIR)/%.o : fundation/src/cpp/%.f90
	$(COMPILE_F90)

$(OUTDIR)/%.o : fundation/src/cpp/core/%.f
	$(COMPILE_F)

$(OUTDIR)/%.o : tbox/src/cpp/%.f
	$(COMPILE_F)

$(OUTDIR)/%.o : fundation/src/cpp/%.f
	$(COMPILE_F)

# Build rules
all: $(OUTFILE)

$(OUTFILE): $(OUTDIR)  $(OBJ)
	$(LINK)

$(OUTDIR):
	$(MKDIR) -p "$(OUTDIR)"

# Rebuild this project
rebuild: cleanall all

# Clean this project
clean:
	$(RM) -f $(OUTFILE)
	$(RM) -f $(OBJ)

# Clean this project and all dependencies
cleanall: clean
endif
